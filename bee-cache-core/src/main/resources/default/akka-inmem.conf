
# akka服务器设置
akka {
  actor {
    allow-java-serialization = on
    # 该参数不能修改
    provider = "cluster"
    serialization-bindings {
      "com.gabry.beecache.protocol.EntityMessage" = kryo
      "com.gabry.beecache.protocol.BeeCacheData" = kryo
    }
    serializers {
      # Define kryo serializer
      kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }

    kryo {
      type = "nograph"
      idstrategy = "automatic"
      buffer-size = 4096
      max-buffer-size = -1
      use-manifests = false
      use-unsafe = false
      //      implicit-registration-logging = true
      //      kryo-trace = true
      resolve-subclasses = true
      mappings {
      }
    }
    database-io-dispatcher {
      # Dispatcher is the name of the event-based dispatcher
      type = Dispatcher
      # What kind of ExecutionService to use
      executor = "fork-join-executor"
      # Configuration for the fork join pool
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 2
        # Parallelism (threads) ... ceil(available processors * factor)
        parallelism-factor = 2.0
        # Max number of threads to cap factor-based parallelism number to
        # Note that the parallelism-max does not set the upper bound on the total number of threads
        # allocated by the ForkJoinPool. It is a setting specifically talking about the number of hot
        # threads the pool keep running in order to reduce the latency of handling a new incoming task.
        # You can read more about parallelism in the JDK’s ForkJoinPool documentation.
        parallelism-max = 10
      }
      # Throughput defines the maximum number of messages to be
      # processed per actor before the thread jumps to the next actor.
      # Set to 1 for as fair as possible.
      throughput = 1000
    }
  }
  remote {
    log-remote-lifecycle-events = off
    artery {
      advanced {
        outbound-message-queue-size = 30720
      }
    }
  }
  cluster {
    // seed-nodes = ["akka.tcp://"${cluster.name}"@169.254.18.45:2551"]

    //roles=["seed","server"]
    seed-node-timeout = 5s
    retry-unsuccessful-join-after = off
    shutdown-after-unsuccessful-join-seed-nodes = 20s
    metrics.native-library-extract-folder = ${user.dir}/target/native
    failure-detector {
      heartbeat-interval = 10s
      acceptable-heartbeat-pause = 30s
      expected-response-after = 5s
    }
    sharding.role = "server"
  }
  persistence {
    journal {
      plugin = "akka.persistence.inmem"
    }
    snapshot-store {
      plugin = "akka.persistence.local-store"
    }
    local-store {
      # Class name of the plugin.
      class = "akka.persistence.snapshot.local.LocalSnapshotStore"
      # Dispatcher for the plugin actor.
      plugin-dispatcher = "akka.persistence.dispatchers.default-plugin-dispatcher"
      # Dispatcher for streaming snapshot IO.
      stream-dispatcher = "akka.persistence.dispatchers.default-stream-dispatcher"
      # Storage location of snapshot files.
      dir = "target"
      # Number load attempts when recovering from the latest snapshot fails
      # yet older snapshot files are available. Each recovery attempt will try
      # to recover using an older than previously failed-on snapshot file
      # (if any are present). If all attempts fail the recovery will fail and
      # the persistent actor will be stopped.
      max-load-attempts = 3
    }
    inmem {
      # Class name of the plugin.
      class = "akka.persistence.journal.inmem.InmemJournal"
      # Dispatcher for the plugin actor.
      plugin-dispatcher = "akka.actor.default-dispatcher"
      # Turn this on to test serialization of the events
      test-serialization = off
    }
  }
  extensions = ["akka.cluster.metrics.ClusterMetricsExtension"]
  # akka.extensions=["akka.cluster.metrics.ClusterMetricsExtension"]
  # extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
}
